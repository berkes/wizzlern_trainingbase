<?php
// $Id: pathauto.module,v 1.126.2.19 2010/03/02 23:04:09 davereid Exp $

/**
 * @defgroup pathauto Pathauto: Automatically generates aliases for content
 *
 * The Pathauto module automatically generates path aliases for various kinds of
 * content (nodes, categories, users) without requiring the user to manually
 * specify the path alias. This allows you to get aliases like
 * /category/my-node-title.html instead of /node/123. The aliases are based upon
 * a "pattern" system which the administrator can control.
 */

/**
 * @file
 * Main file for the Pathauto module, which automatically generates aliases for content.
 *
 * @ingroup pathauto
 */

/**
 * Implements hook_help().
 */
function pathauto_help($path, $arg) {
  switch ($path) {
    case 'admin/help#pathauto':
      module_load_include('inc', 'pathauto');
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides a mechanism for modules to automatically generate aliases for the content they manage.') . '</p>';
      $output .= '<h3>' . t('Settings') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Maximum alias and component length') . '</dt>';
      $output .= '<dd>' . t('The <strong>maximum alias length</strong> and <strong>maximum component length</strong> values default to 100 and have a limit of @max from Pathauto. This length is limited by the length of the "alias" column of the url_alias database table. The default database schema for this column is @max. If you set a length that is equal to that of the one set in the "alias" column it will cause problems in situations where the system needs to append additional words to the aliased URL. For example, URLs generated for feeds will have "/feed" added to the end. You should enter a value that is the length of the "alias" column minus the length of any strings that might get added to the end of the URL. The length of strings that might get added to the end of your URLs depends on which modules you have enabled and on your Pathauto settings. The recommended and default value is 100.', array('@max' => _pathauto_get_schema_alias_maxlength())) . '</dd>';
      $output .= '<dt>' . t('Raw tokens') . '</dt>';
      $output .= '<dd>' . t('In Pathauto it is appropriate to use the -raw form of tokens. Paths are sent through a filtering system which ensures that raw user content is filtered. Failure to use -raw tokens can cause problems with the Pathauto punctuation filtering system.') . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_perm().
 */
function pathauto_perm() {
  return array(
    'administer pathauto',
    'notify of path changes',
  );
}

/**
 * Implements hook_menu().
 */
function pathauto_menu() {
  $items['admin/build/path/pathauto'] = array(
    'title' => 'Automated alias settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pathauto_admin_settings'),
    'access callback' => 'user_access',
    'access arguments' => array('administer pathauto'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'pathauto.admin.inc',
  );

  $items['admin/build/path/delete_bulk'] = array(
    'title' => 'Delete aliases',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pathauto_admin_delete'),
    'access arguments' => array('administer url aliases'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 11,
    'file' => 'pathauto.admin.inc',
  );

  return $items;
}

/**
 * Include all Pathauto include files.
 */
function _pathauto_include() {
  module_load_include('inc', 'pathauto');
  module_load_include('inc', 'pathauto', 'pathauto_node');
  module_load_include('inc', 'pathauto', 'pathauto_taxonomy');
  module_load_include('inc', 'pathauto', 'pathauto_user');
}

/**
 * Implements hook_token_list().
 */
function pathauto_token_list($type = 'all') {
  module_load_include('inc', 'pathauto', 'pathauto.tokens');
  return _pathauto_token_list($type);
}

/**
 * Implements hook_token_values().
 */
function pathauto_token_values($type, $object = NULL) {
  module_load_include('inc', 'pathauto', 'pathauto.tokens');
  return _pathauto_token_values($type, $object);
}

/**
 * Implements hook_path_alias_types().
 *
 * Used primarily by the bulk delete form.
 */
function pathauto_path_alias_types() {
  $objects = array('user/' => t('Users'), 'node/' => t('Content'));
  if (module_exists('blog')) {
    $objects['blog/'] = t('User blogs');
  }
  if (module_exists('taxonomy')) {
    $objects['taxonomy/'] = t('Vocabularies and terms');
  }
  if (module_exists('tracker')) {
    $objects['user/%/track'] = t('User trackers');
  }
  if (module_exists('forum')) {
    $objects['forum/%'] = t('Forums');
  }
  return $objects;
}

/**
 * Load an URL alias pattern by entity, bundle, and language.
 *
 * @param $entity
 *   An entity (e.g. node, taxonomy, user, etc.)
 * @param $bundle
 *   A bundle (e.g. node type, vocabulary ID, etc.)
 * @param $language
 *   An optional language code.
 */
function pathauto_pattern_load_by_entity($entity, $bundle = '', $language = '') {
  static $patterns = array();

  $pattern_id = "$entity:$bundle:$language";
  if (!isset($patterns[$pattern_id])) {
    $variables = array();
    if ($language) {
      $variables[] = "pathauto_{$entity}_{$bundle}_{$language}_pattern";
    }
    if ($bundle) {
      $variables[] = "pathauto_{$entity}_{$bundle}_pattern";
    }
    $variables[] = "pathauto_{$entity}_pattern";

    foreach ($variables as $variable) {
      if ($pattern = trim(variable_get($variable, ''))) {
        break;
      }
    }

    $patterns[$pattern_id] = $pattern;
  }

  return $patterns[$pattern_id];
}

//==============================================================================
// Some node related functions.

/**
 * Implements hook_nodeapi().
 */
function pathauto_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'presave':
      // About to be saved (before insert/update)
      if (!empty($node->pathauto_perform_alias) && isset($node->old_alias)
          && $node->path == '' && $node->old_alias != '') {
        /**
         * There was an old alias, but when pathauto_perform_alias was checked
         * the javascript disabled the textbox which led to an empty value being
         * submitted. Restoring the old path-value here prevents the Path module
         * from deleting any old alias before Pathauto gets control.
         */
        $node->path = $node->old_alias;
      }
      break;
    case 'insert':
    case 'update':
      // Only do work if there's a pattern.
      $language = variable_get('language_content_type_' . $node->type, 0) ? $node->language : '';
      if ($pattern = pathauto_pattern_load_by_entity('node', $node->type, $language)) {
        _pathauto_include();
        // Only create an alias if the checkbox was not provided or if the checkbox was provided and is checked
        if (!isset($node->pathauto_perform_alias) || $node->pathauto_perform_alias) {
          $placeholders = pathauto_get_placeholders('node', $node);
          $src = "node/$node->nid";
          $alias = pathauto_create_alias('node', $op, $placeholders, $src, $node->nid, $node->type, $node->language);
        }
      }
      break;
    case 'delete':
      path_set_alias('node/'. $node->nid);
      path_set_alias('node/'. $node->nid .'/feed');
      break;
    default:
      break;
  }
}

/**
 * Implements hook_form_alter().
 *
 * This allows alias creators to override Pathauto and specify their
 * own aliases (Pathauto will be invisible to other users). Inserted
 * into the path module's fieldset in the node form.
 */
function pathauto_form_alter(&$form, $form_state, $form_id) {
  // Process only node forms.
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
    $node = $form['#node'];

    // Find if there is an automatic alias pattern for this node type.
    $language = isset($node->language) ? $node->language : '';
    $pattern = pathauto_pattern_load_by_entity('node', $node->type, $language);

    // If there is a pattern, show the automatic alias checkbox.
    if ($pattern) {
      if (!isset($node->pathauto_perform_alias)) {
        if (!empty($node->nid)) {
          // If this is not a new node, compare it's current alias to the
          // alias that would be genereted by pathauto. If they are the same,
          // then keep the automatic alias enabled.
          _pathauto_include();
          $placeholders = pathauto_get_placeholders('node', $node);
          $pathauto_alias = pathauto_create_alias('node', 'return', $placeholders, "node/{$node->nid}", $node->nid, $node->type, $node->language);
          $node->pathauto_perform_alias = isset($node->path) && $node->path == $pathauto_alias;
        }
        else {
          // If this is a new node, enable the automatic alias.
          $node->pathauto_perform_alias = TRUE;
        }
      }

      // Add JavaScript that will disable the path textfield when the automatic
      // alias checkbox is checked.
      drupal_add_js(drupal_get_path('module', 'pathauto') .'/pathauto.js');

      // Override path.module's vertical tabs summary.
      $form['path']['#attached']['js']['vertical-tabs'] = drupal_get_path('module', 'pathauto') . '/pathauto.js';

      $form['path']['pathauto_perform_alias'] = array(
        '#type' => 'checkbox',
        '#title' => t('Automatic alias'),
        '#default_value' => $node->pathauto_perform_alias,
        '#description' => t('An alias will be generated for you. If you wish to create your own alias below, uncheck this option.'),
        '#weight' => -1,
      );

      if (user_access('administer pathauto')) {
        $form['path']['pathauto_perform_alias']['#description'] .= ' ' . t('To control the format of the generated aliases, see the <a href="@pathauto">automated alias settings</a>.', array('@pathauto' => url('admin/build/path/pathauto')));
      }

      if ($node->pathauto_perform_alias && !empty($node->old_alias) && empty($node->path)) {
        $form['path']['path']['#default_value'] = $node->old_alias;
        $node->path = $node->old_alias;
      }

      // For Pathauto to remember the old alias and prevent the Path-module from deleteing it when Pathauto wants to preserve it
      if (isset($node->path)) {
        $form['path']['old_alias'] = array(
          '#type' => 'value',
          '#value' => $node->path,
        );
      }
    }
  }
}

/**
 * Implements hook_node_operations().
 */
function pathauto_node_operations() {
  $operations = array(
    'update_alias' => array(
      'label' => t('Update path alias'),
      'callback' => 'pathauto_node_operations_update',
    ),
  );
  return $operations;
}

/**
 * Callback function for updating node aliases.
 *
 * @param $nodes
 *   Array of node nid's.
 */
function pathauto_node_operations_update($nodes) {
  _pathauto_include();
  foreach ($nodes as $nid) {
    $node = node_load($nid);
    $placeholders = pathauto_get_placeholders('node', $node);
    pathauto_create_alias('node', 'bulkupdate', $placeholders, "node/$node->nid", $node->nid, $node->type, $node->language);
  }
}

//==============================================================================
// Taxonomy related functions.

/**
 * Implements hook_taxonomy().
 */
function pathauto_taxonomy($op, $type, $object = NULL) {
  switch ($type) {
    case 'term':
      switch ($op) {
        case 'insert':
        case 'update':
          $category = (object) $object;

          // Only do work if there's a pattern.
          if ($pattern = pathauto_pattern_load_by_entity('taxonomy', $category->vid)) {
            _pathauto_include();
            // Use the category info to automatically create an alias
            if ($category->name) {
              $count = _taxonomy_pathauto_alias($category, $op);
            }

            // For all children generate new alias (important if [catpath] used)
            foreach (taxonomy_get_tree($category->vid, $category->tid) as $subcategory) {
              $count = _taxonomy_pathauto_alias($subcategory, $op);
            }
          }

          break;
        case 'delete':
          // If the category is deleted, remove the path aliases
          $category = (object) $object;
          path_set_alias('taxonomy/term/'. $category->tid);
          path_set_alias(taxonomy_term_path($category));
          path_set_alias('forum/'. $category->tid);
          path_set_alias('taxonomy/term/'. $category->tid .'/0/feed');
          break;
        default:
          break;
      }
      break;
    default:
      break;
  }
}

//==============================================================================
// User related functions.

/**
 * Implements hook_user() for users, trackers, and blogs.
 */
function pathauto_user($op, &$edit, &$user, $category = FALSE) {
  switch ($op) {
    case 'insert':
    case 'update':
      _pathauto_include();
      // Use the username to automatically create an alias
      $pathauto_user = (object) array_merge((array) $user, $edit);
      if ($user->name) {
        $placeholders = pathauto_get_placeholders('user', $pathauto_user);
        $src = 'user/'. $user->uid;
        $alias = pathauto_create_alias('user', $op, $placeholders, $src, $user->uid);

        if (module_exists('blog')) {
          $new_user = drupal_clone($user);
          if ($category == 'account') {
            $new_user->roles = isset($edit['roles']) ? $edit['roles'] : array();
            $new_user->roles[DRUPAL_AUTHENTICATED_RID] = t('authenticated user'); // Add this back
          }
          if (node_access('create', 'blog', $new_user)) {
            $src = 'blog/'. $user->uid;
            $alias = pathauto_create_alias('blog', $op, $placeholders, $src, $user->uid);
          }
          else {
            path_set_alias('blog/'. $user->uid);
            path_set_alias('blog/'. $user->uid .'/feed');
          }
        }
        if (module_exists('tracker')) {
          $src = 'user/'. $user->uid .'/track';
          $alias = pathauto_create_alias('tracker', $op, $placeholders, $src, $user->uid);
        }
        if (module_exists('contact')) {
          $src = 'user/'. $user->uid .'/contact';
          $alias = pathauto_create_alias('contact', $op, $placeholders, $src, $user->uid);
        }
      }
      break;
    case 'delete':
      // If the user is deleted, remove the path aliases
      $user = (object) $user;
      path_set_alias('user/'. $user->uid);

      // They may have enabled these modules and/or feeds when the user was created, so let's try to delete all of them
      path_set_alias('blog/'. $user->uid);
      path_set_alias('blog/'. $user->uid .'/feed');
      path_set_alias('user/'. $user->uid .'/track');
      path_set_alias('user/'. $user->uid .'/track/feed');
      path_set_alias('user/'. $user->uid .'/contact');
      break;
    default:
      break;
  }
}
